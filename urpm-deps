#! /usr/bin/env python3

import os
import sys
import fnmatch
import argparse
from subprocess import call, check_call, check_output, CalledProcessError, DEVNULL


rpm_db  = False
verbose = False
reverse = False
max_depth = None
force_color = False
packages_ignored = set()
packages_ignored_patterns = set() # packages subject to Unix filename pattern matching
ignored_default = set(['glibc', 'systemd', 'rpm-helper', 'bash', 'libgcc*', 'libstdc++*'])


def say(msg):
    if verbose:
        sys.stderr.write(msg + "\n")

def pr_err(msg):
    sys.stderr.write(msg + "\n")

def warn(msg):
    sys.stderr.write("Warning: " + msg + "\n")

def die(msg):
    sys.stderr.write("Error: " + msg + "\n")
    exit(1)

def bug(msg):
    sys.stderr.write("BUG: " + msg + "\n")
    exit(1)


rpm   = ['rpm', '-q', '--qf', '%{NAME}\n']
urpmq = ['urpmq']

#
# rpm/urpmq outputs are always treated as text.
#
def check_text_output(*args, **kwargs):
    kwargs['universal_newlines'] = True
    return check_output(*args, **kwargs)


class Dependency(object):

    def __init__(self, name):
        self.name = name
        self._provider = None

    @property
    def provider(self):
        return self._provider

    @provider.setter
    def provider(self, p):
        # urpmq(1) can report multiple providers separated with
        # '|'. OTOH rpm(1) doesn't allow '|' in package name, so it's
        # safe to do the split unconditionally.
        self._provider = p.strip().split('|')[0]

#
# Special case using rpm(1) to find out reverse dependencies: rpm(1)
# is not clever enough to find out packages which require another
# package. We need to ask it which packages require this *provide*.
#
def _get_local_rdependencies(pkg):
    # This shouldn't fail since all pkg names have been initially
    # checked otherwise they're issued from rpm.
    provides = check_text_output(rpm + ['--provides', pkg])

    rdeps = set()
    for d in set(provides.splitlines()):
        # Strip the version constraint if present.
        d = d.split()[0]

        # In reverse mode, we search for all packages using one of the
        # package's provides.
        try:
            x = check_text_output(rpm + ['--whatrequires', d])
        except CalledProcessError:
            # rpm(1) will fail when using '--whatrequires' instead
            # of returning an empty value.
            x = ''

        rdeps.update(x.splitlines())

    return rdeps


# A cache to store some information about a package
# dependency/require.
dependencies = {}

def _get_dependencies(pkg, br=False):
    #
    # rpm(1) --whatrequires needs a special treatment.
    #
    assert(not(rpm_db and reverse))

    #
    # 'urpmq --whatrequires --build-requires' is broken.
    #
    if br:
        assert(not reverse)
        assert(not rpm_db)

    #
    # Plug stderr to /dev/null to get rid of the annoying warning:
    # "--requires behaviour changed, use --requires-recursive to get the old behaviour"
    #
    cmd  = rpm if rpm_db else urpmq
    opts = ['--requires' if not reverse else '--whatrequires']
    stderr = DEVNULL if cmd == urpmq else None

    # This shouldn't fail since all pkg names have been initially
    # checked otherwise they're issued from rpm.
    if br:
        opts += ['--src']
    ugly_deps = check_text_output(cmd + opts + [pkg], stderr=stderr)

    deps = set()
    for d in set(ugly_deps.splitlines()):
        #
        # Strip the version constraint suffixes
        #
        if cmd == rpm:
            d = d.split()[0]
        else:
            # urpmq --requires, uses '<package>:' prefix when
            # displaying dependencies for a non-installed package
            # otherwise it probably uses rpm's output directly. Nice.
            if d.startswith(pkg + ':'):
                d = d[len(pkg)+1:].lstrip()

            # urpmq(1) reports version constraint in []
            for sep in ('['):
                l = d.split(sep)
                if len(l) > 1:
                    d = l[0]
                    break
        #
        # rpmlib(x) deps are really not interesting for us. It's
        # normally only reported by rpm(1), but it shouldn't hurt
        # for the other case.
        #
        if d.startswith('rpmlib'):
            continue

        #
        # urpmq(1) can return paths, typelib(x) and a lot more
        # fancier names. So sanitize them by converting the fancy name
        # into a package one.
        #
        dep = dependencies.get(d)
        if not dep:
            dep = Dependency(d)
            try:
                dep.provider = check_text_output(cmd + ['--whatprovides', d], stderr=DEVNULL)
            except CalledProcessError:
                # If for some reasons, no package provides this dep,
                # we still register the dep but no provider will be
                # set so we could detect the error later.
                pass
            dependencies[d] = dep
        deps.add(dep)

    return deps


def get_dependencies(pkg, br=False):
    if rpm_db and reverse:
        deps = _get_local_rdependencies(pkg)
    else:
        deps = _get_dependencies(pkg, br)

    providers = set()
    for d in deps.copy():
        dep = d.provider if d.provider else d.name

        # For now, we report canonical dep names only, so remove
        # duplicates.
        if dep in providers:
            deps.remove(d)
            continue
        providers.add(dep)

        # Filter out packages the user is not interested in.
        if dep == pkg:
            deps.remove(d)
        elif dep in packages_ignored:
            deps.remove(d)
        else:
            for pattern in packages_ignored_patterns:
                if fnmatch.fnmatchcase(dep, pattern):
                    deps.remove(d)
                    break
    return deps

#
# 'dot' subcommand.
#
def dot_print_dependency(d, p, reverse, br):
    node_attributes = []
    dep = d.provider if d.provider else d.name

    if not d.provider:
        node_attributes.append('color=red,style=filled')
    if node_attributes:
        print('  "%s" [%s];' % (dep, ','.join(node_attributes)))

    edge_attributes = []
    if br:
        edge_attributes.append('color=darkgoldenrod')

    d, p = (p, dep) if reverse else (dep, p)
    print('  "%s" -> "%s" [%s];' % (p, d, ','.join(edge_attributes)))


def dot_requires_one(p, visited=set(), level=1, br=False):
    if max_depth is not None:
        if level > max_depth:
            return
    if p not in visited:
        visited.add(p)

        deps = get_dependencies(p, br)
        for d in deps:
            dot_print_dependency(d, p, reverse, br)
        for d in deps:
            if d.provider:
                dot_requires_one(d.provider, visited, level+1)


def dot_requires(packages, br=False, expand=False, concentrate=False):
    print('digraph "%s" {' % " ".join(sys.argv))
    print('  compound=%s;'    % ("true" if expand else "false"))
    print('  concentrate=%s;' % ("true" if concentrate else "false"))

    for p in packages:
        dot_requires_one(p, br=br)

    print('}')


def do_dot(args):
    dot_requires(args.packages, br=args.build_requires)

#
# 'tree' subcommand.
#
ansi_color_escape_map = {
    'off'       : "\x1B[0m",
    'bold'      : "\x1B[1m",
    'blink'     : "\x1B[5m",
    'red'       : "\x1B[31m",
    'yellow'    : "\x1B[33m",
    'green'     : "\x1B[32m",
}


def print_color(msg, colors):
    for c in colors:
        print(ansi_color_escape_map[c], end='')
    print(msg, end='')
    print(ansi_color_escape_map['off'])


def tree_requires_print(dep, branches, last, seen=False, cyclic=False, br=False):
    print('%s%s ' % (branches, '└─' if last else '├─'), end='')

    p = dep.provider
    if not sys.stdout.isatty() and not force_color:
        print(p if p else '**' + dep.name + '**')
        return

    colors = ()
    if not p:
        colors = ('blink', 'bold', 'red')
        p = dep.name
    elif cyclic:
        colors = ('red',)
        p += '...'
    elif seen:
        colors = ('green',)
        p += '...'
    elif br:
        colors = ('yellow',)

    print_color('%s' % p, colors)


# Mutable default arguments are intendend here: we want to show only
# once a package and its deps even when several roots are used.
def tree_requires_one(p, level=1, branches='   ', visited=set(), visited_branch=set(), br=False):
    if max_depth is not None:
        if level > max_depth:
            return

    visited.add(p)
    visited_branch.add(p)

    deps = get_dependencies(p, br)
    for i, d in enumerate(deps, 1):
        provider = d.provider
        last = i == len(deps)

        if not provider:
            tree_requires_print(d, branches, last)
        elif provider in visited_branch:
            #
            # Highlight cyclic dependency.
            #
            tree_requires_print(d, branches, last, cyclic=True)
        elif provider in visited:
            #
            # Don't recurse into the same package if it's already
            # been visited by another branch.
            #
            tree_requires_print(d, branches, last, seen=True)
        else:
            tree_requires_print(d, branches, last, br=br)
            branches += '│  ' if not last else '   '
            tree_requires_one(provider, level+1, branches, visited)
            branches = branches[:-3]

    visited_branch.remove(p)


def do_tree(args):
    global force_color

    force_color = args.color

    for p in args.packages:
        print("%s" % p)
        tree_requires_one(p, br=args.build_requires)

#
#
#
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="A tool to analyze package dependencies")
    parser.add_argument("-q", "--quiet", action="store_true", help="be quiet")
    subparsers = parser.add_subparsers()

    # 'dot' sucommand specific options
    parser_dot = subparsers.add_parser('dot', help='generate a textual dependency graph description in dot format')
    parser_dot.set_defaults(func=do_dot)

    # 'tree' subcommand specific options
    parser_tree = subparsers.add_parser('tree', help='show dependencies of the specified package')
    parser_tree.add_argument('--no-pager',  action="store_true", help='do not pipe output into a pager')
    parser_tree.add_argument('--color', '--colour', action="store_true", help='force colours usage')
    parser_tree.set_defaults(func=do_tree)

    # subcommands common options
    for sp in (parser_dot, parser_tree):
        sp.add_argument('--urpmi-db', action="store_true", help='use urpmi database instead of rpm (local) one')
        sp.add_argument('--all', action="store_true", help='include packages suppressed by default (glibc...)')
        sp.add_argument('--reverse', action="store_true", help='show reverse dependencies')
        sp.add_argument('--build-requires', action="store_true", help='show build dependencies')
        sp.add_argument('--max-depth', type=int, help='limit the number of levels of dependencies')
        sp.add_argument('--ignore', nargs='+', help='list of packages to ignore', metavar='package')
        sp.add_argument('packages', nargs='+', help='list of the packages to start the analyze from')

    args = parser.parse_args()
    rpm_db  = not args.urpmi_db
    verbose = not args.quiet
    reverse = args.reverse
    max_depth = args.max_depth

    #
    # Deal with build requires and its special use cases.
    #
    if not rpm_db:
        # Figure out if a source package is enabled.
        source_media_enabled = not call(urpmq + ['--src', 'rpm'], stdout=DEVNULL, stderr=DEVNULL)

        if not source_media_enabled and args.build_requires:
            die("You must activate one or more source medias in order to use --build-requires.")

        #
        # 'urpmq --whatrequires' returns both source packages and
        # binary ones when a source media is activated and *without*
        # any distinction. The result is not usable, so we simply
        # forbid any uses of source medias with --reverse option.
        #
        if source_media_enabled and reverse:
            pr_err('One or more source medias are currently activated and you passed --reverse option.')
            pr_err('This is not possible due to limitations of urpmq which doesnt make any distinction')
            pr_err('between binary and source packages in this case.')
            if args.build_requires:
                die('Therefore --reverse is not allowed with --build-requires.')
            die('Therefore you must disable the source media in /etc/urpmi/urpmi.cfg with --reverse.')

    else:
        if args.build_requires:
            die('--build-requires is only allowed with --urpmi-db.')

    #
    # Check the validity of packages names given by the user.
    #
    for p in args.packages:
        cmd = rpm if rpm_db else urpmq
        try:
            # rpm(1) reports error on stdout...
            check_call(cmd + [p], stdout=DEVNULL, stderr=DEVNULL)
        except CalledProcessError:
            die("Unknown package '%s'" % p)

    #
    # Init filters.
    #
    if not args.all:
        packages_ignored |= ignored_default
    if args.ignore:
        packages_ignored |= set(args.ignore)
    for p in packages_ignored.copy():
        # any shell-style wildcards ?
        for schar in ('*', '?', '['):
            if schar in p:
                packages_ignored.remove(p)
                packages_ignored_patterns.add(p)

    try:
        sys.exit(args.func(args))
    except KeyboardInterrupt:
        sys.exit("Interrupted.")
