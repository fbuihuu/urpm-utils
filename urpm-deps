#! /usr/bin/env python3

import os
import sys
import fnmatch
import argparse
from subprocess import check_call, check_output, CalledProcessError, DEVNULL


local   = False
verbose = False
reverse = False
max_depth = None
packages_ignored = set()
packages_ignored_patterns = set() # packages subject to Unix filename pattern matching
ignored_default = set(['glibc', 'systemd', 'rpm-helper', 'bash', 'libgcc*', 'libstdc++*'])


def say(msg):
    if verbose:
        sys.stderr.write(msg + "\n")

def warn(msg):
    sys.stderr.write("Warning: " + msg + "\n")

def die(msg):
    sys.stderr.write("Error: " + msg + "\n")
    exit(1)

def bug(msg):
    sys.stderr.write("BUG: " + msg + "\n")
    exit(1)


aliases = {}

rpm   = ['rpm', '-q', '--qf', '%{NAME}\n']
urpmq = ['urpmq']

#
# Special case using rpm(1) to find out reverse dependencies: rpm(1)
# is not clever enough to find out packages which require another
# package. We need to ask it which packages require this *provide*.
#
def _get_local_rdependencies(pkg):
    # This shouldn't fail except for the very first
    # package. FIXME: we should ensure that the package passed by
    # the user is correct.
    provides = check_output(rpm + ['--provides', pkg],
                              universal_newlines=True)

    rdeps = set()
    for d in set(provides.splitlines()):
        # Strip the version constraint if present.
        d = d.split()[0]

        # In reverse mode, we search for all packages using one of the
        # package's provides.
        try:
            x = check_output(rpm + ['--whatrequires', d],
                             universal_newlines=True).rstrip()
        except CalledProcessError:
            # rpm(1) will fail when using '--whatrequires' instead
            # of returning an empty value.
            x = ''

        rdeps.update(x.splitlines())

    return rdeps


def _get_dependencies(pkg):
    #
    # rpm(1) --whatrequires needs a special treatment.
    #
    assert(not(local and reverse))

    # This shouldn't fail except for the very first
    # package. FIXME: we should ensure that the package passed by
    # the user is correct.
    #
    # Plug stderr to /dev/null to get rid of the annoying warning:
    # "--requires behaviour changed, use --requires-recursive to get the old behaviour"
    #
    cmd  = rpm if local else urpmq
    opts = ['--requires' if not reverse else '--whatrequires']

    ugly_deps = check_output(cmd + opts + [pkg],
                             stderr=DEVNULL if cmd != rpm else None,
                             universal_newlines=True)

    deps = set()
    for d in set(ugly_deps.splitlines()):
        #
        # Strip the version constraint suffixes
        #
        if cmd == rpm:
            d = d.split()[0]
        else:
            # urpmq(1) reports version constraint in []
            for sep in ('['):
                l = d.split(sep)
                if len(l) > 1:
                    d = l[0]
                    break

        #
        # rpmlib(x) deps are really not interesting for us. It's
        # normally only reported by rpm(1), but it shouldn't hurt
        # for the other case.
        #
        if d.startswith('rpmlib'):
            continue

        #
        # urpmq(1) can return paths, typelib(x) and a lot more
        # fancier names. So sanitize them by converting the fancy name
        # into a package one.
        #
        if d not in aliases:
            x = check_output(cmd + ['--whatprovides', d],
                             universal_newlines=True).rstrip()
            aliases[d] = x.split(None if cmd == rpm else '|')[0]

        deps.add(aliases[d])

    return deps


def get_dependencies(pkg):
    if local and reverse:
        deps = _get_local_rdependencies(pkg)
    else:
        deps = _get_dependencies(pkg)

    # Filter out packages the user is not interested in.
    for d in deps.copy():
        if d == pkg:
            deps.remove(d)
        elif d in packages_ignored:
            deps.remove(d)
        else:
            for pattern in packages_ignored_patterns:
                if fnmatch.fnmatchcase(d, pattern):
                    deps.remove(d)
                    break

    return deps

#
# 'dot' subcommand.
#
def dot_requires_one(p, visited=set(), level=1):
    if max_depth is not None:
        if level > max_depth:
            return
    if p not in visited:
        visited.add(p)

        deps = get_dependencies(p)
        for d in deps:
            print('  "%s" -> "%s";' % (d, p) if reverse else (p, d))
        for d in deps:
            dot_requires_one(d, visited, level+1)


def dot_requires(packages, expand=False, concentrate=False):
    print('digraph "%s" {' % " ".join(sys.argv))
    print('  compound=%s;'    % ("true" if expand else "false"))
    print('  concentrate=%s;' % ("true" if concentrate else "false"))

    for p in packages:
        dot_requires_one(p)

    print('}')


def do_dot(args):
    dot_requires(args.packages)

#
# 'tree' subcommand.
#
ansi_color_escape_map = {
    'red'       : "\x1B[31m",
    'yellow'    : "\x1B[33m",
    'green'     : "\x1B[32m",
    'off'       : "\x1B[0m",
}


def tree_requires_print(p, branches, last, color=None):
    print('%s%s ' % (branches, '└─' if last else '├─'), end='')
    if color and sys.stdout.isatty():
        print('%s%s%s' % (ansi_color_escape_map[color], p, ansi_color_escape_map['off']))
    else:
        print(p)


def tree_requires_one(p, level=1, branches='   ', visited=set(), visited_branch=set()):
    if max_depth is not None:
        if level > max_depth:
            return

    assert(p not in visited)
    visited.add(p)
    visited_branch.add(p)

    deps = get_dependencies(p)
    for i, d in enumerate(deps):
        last = i+1 == len(deps)

        if d in visited_branch:
            #
            # Highlight cyclic dependency.
            #
            tree_requires_print('%s...' % d, branches, last, 'red')
        elif d in visited:
            #
            # Don't recurse into the same package if it's already
            # been visited by another branch.
            #
            tree_requires_print('%s...' % d, branches, last, 'green')
        else:
            tree_requires_print(d, branches, last)
            branches += '│  ' if not last else '   '
            tree_requires_one(d, level+1, branches, visited)
            branches = branches[:-3]

    visited_branch.remove(p)


def do_tree(args):
    print("%s" % args.package)
    tree_requires_one(args.package)

#
#
#
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="A tool to analyze package dependencies")
    parser.add_argument("-q", "--quiet", action="store_true", help="be quiet")
    subparsers = parser.add_subparsers()

    # 'dot' sucommand specific options
    parser_dot = subparsers.add_parser('dot', help='generate a textual dependency graph description in dot format')
    parser_dot.add_argument('packages', nargs='+', help='list of the packages to start the analyze from')
    parser_dot.set_defaults(func=do_dot)

    # 'tree' subcommand specific options
    parser_tree = subparsers.add_parser('tree', help='show dependencies of the specified package')
    parser.add_argument('--no-pager',  action="store_true", help='do not pipe output into a pager')
    parser_tree.add_argument('package', help='package name')
    parser_tree.set_defaults(func=do_tree)

    # subcommands common options
    for sp in (parser_dot, parser_tree):
        sp.add_argument('--local', action="store_true", help='analyze the host system instead of the repository')
        sp.add_argument('--all', action="store_true", help='include packages suppressed by default (glibc...)')
        sp.add_argument('--reverse', action="store_true", help='show reverse dependencies')
        sp.add_argument('--max-depth', type=int, help='limit the number of levels of dependencies')
        sp.add_argument('--ignore', nargs='+', help='list of packages to ignore', metavar='package')

    args = parser.parse_args()
    local = args.local
    verbose = not args.quiet
    reverse = args.reverse
    max_depth = args.max_depth

    if not local and verbose:
        say("If one of the following medias contains source packages, then")
        say("the generated graph will contain build dependencies too.")
        say("")
        say("List of active medias:")
        say("----------------------")
        check_call(urpmq + ['--list-media', 'active'], stdout=sys.stderr.buffer)
        say("----------------------")

    if not args.all:
        packages_ignored |= ignored_default
    if args.ignore:
        packages_ignored |= set(args.ignore)
    for p in packages_ignored.copy():
        # any shell-style wildcards ?
        for schar in ('*', '?', '['):
            if schar in p:
                packages_ignored.remove(p)
                packages_ignored_patterns.add(p)

    try:
        sys.exit(args.func(args))
    except KeyboardInterrupt:
        sys.exit("Interrupted.")
