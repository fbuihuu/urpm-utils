#! /bin/bash

set -o pipefail

warn() {
	echo >&2 "$@"
}

die() {
	warn "$@"
	exit 1
}

usage() {
	warn "$(basename $0) [-v] [-n] [--tmpdir=<dir>] [--media=<media>] [--include-media=<media>] [--exclude-media=<media>] [--rsync-exclude=<pattern>] [--rsync-filter-from=<file>...] --list=<file> <SRC> <DST>"
	warn
	warn "  $(basename $0) is a tool to import or update a set of given packages"
	warn "  and all their dependencies as well. Therefore it can be usefull to create"
	warn "  or maintain a repository of a distribution containing only a subset of"
	warn "  packages."
	warn
	warn "  <SRC>: an url that specifies the root location of the set of medias"
	warn "  <DST>: the directory where to put the imported distribution medias tree"
	warn
	warn "  Example:"
	warn
	warn "    $(basename $0) --rsync-filter-from=excluded.lst --list=packages.lst fbui@abed.mbs:/home/repos/mbs1/x86_64 /tmp/mbs1/"
	warn "    $(basename $0) --rsync-filter-from=excluded.lst --list=packages.lst rsync://mirrorsync@mirror.mandriva.com/factory/x86_64 /tmp/factory"
	warn
	warn "  Sample of 'excluded.lst':"
	warn
	warn "  - /*/doc/"
	warn "  - /*/misc/"
	warn "  - /*/dosutils/"
	warn "  - /*/install/"
	warn "  - /*/isolinux/"
	warn "  - /*/media/debug/"
	warn "  - /*/media/mbs1_updates/"
	warn "  - /*/media/*/testing/"
	warn "  - /*/media/tainted/"
	warn "  - /*/media/perso/"
	warn "  - /*/media/stylite/"
	warn
	exit 1
}

tmpdir=
package_list=
dry_run=
exclude_patterns=()
filter_from=
verbose=
media_default=()
media_included=()
media_excluded=()

while

	case $1 in
	--list=*)		package_list=${1#--list=} ;;
	--tmpdir=*)		tmpdir=${1#--tmpdir=} ;;
	--rsync-exclude=*)	exclude_patterns+=(--exclude=${1#*=}) ;;
	--rsync-filter-from=*)	filter_from=${1#*=} ;;
	--media=*)		media_all+=${1#*=} ;;
	--include-media=*)	media_included+=${1#*=} ;;
	--exclude-media=*)	media_excluded+=${1#*=} ;;
	-n)			dry_run=-n ;;
	-v)			verbose=-v ;;
	-*)			usage ;;
	*)			break
	esac
do
	shift
done

if test $# -ne 2; then
	usage
fi

distrib=$1
destination=$2

if ! test -d $destination; then
	die "Invalid destination directory"
fi

if test -z "$package_list"; then
	die "You must provide a file containing the list of the (root) packages to import."
fi

if test -n "$filter_from"; then
	filter_from=$(readlink -e $filter_from) ||
	die "Filter file not found."
fi

case $distrib in
rsync://*)	;;
*://*)		die 'Invalid protocol.' ;;
esac

case $distrib in
*/)
	warn '<SRC> has a trailing slash which is not allowed otherwise'
	warn 'the root directory of your set of media would be skipped'
	warn 'according to the rsync(1) pattern.'
	warn
	warn 'Please remove it and update your filter patterns (if any)'
	warn 'accordingly.'
	exit 1
esac

#
# Read the list of the (root) packages to import.
#
declare -a packages

if ! test -r "$package_list"; then
	die "Failed to read file '$package_list'"
fi

while read pkg; do
	case $pkg in
	\#*)	continue ;;
	esac
	packages+=($pkg)
done <"$package_list"

if test ${#packages[*]} -eq 0; then
	die "The list of packages you provided is empty."
fi

#
# Import preferred packages from /etc/urpmi/prefer.list and
# /etc/urpmi/prefer.vendor.list since urpmq(1) doesn't. The manpage
# claims about a --prefer option which has no effects AFAICS.
#
declare -A preferred_packages
declare -a preferred_regexp_packages

for f in /etc/urpmi/prefer.{,vendor.}list; do
	test -r $f || continue

	while read p; do
		case $p in
		'')	continue ;;
		\#*)	continue ;;
		/*/)	preferred_regexp_package+=(${p:1:-1}) ;;
		*)	preferred_packages[$p]=$p
		esac
	done <$f
done

#
# Temporary directory.
#
cleanup_on_exit() {
	$clean_tmpdir && rm -fr $tmpdir
}
trap cleanup_on_exit EXIT

clean_tmpdir=false
if test -z "$tmpdir"; then
	tmpdir=$(mktemp -d)
	clean_tmpdir=true
fi

if ! test -d "$tmpdir"; then
	die "Invalid temporary directory provided."
fi

#
# Generate the list of the packages including all dependencies.
#
# Caveat: urpm* uses it own syntax for specifying an url with ssh
# protocol (otherwise life would be too simple):
#
#    ssh://fbui@abed.mbs/home/repos/mbs1/x86_64
#
# whereas the traditionnal way to specify that would be:
#
#    fbui@abed.mbs:/home/repos/mbs1/x86_64
#
# ssh:// prefix must be given and the ':' before the remote path is
# dropped, meaning that path is always absolute...
#
# Also when specifying a rsync protocole, the form using the '::' is
# not supported so convert the url to use the 'rsync://' form.
#
case $distrib in
rsync://*)	stupid_urpm_url=$distrib ;;
*::*)		stupid_urpm_url=rsync://${distrib/::/\/} ;;
*:/*)		stupid_urpm_url=ssh://${distrib/:\//\/} ;;
/*)		stupid_urpm_url=$distrib ;;
*)		die "You must use an absolute path for specifying distribution URL."
esac

#
# Setup the list of medias to use.
#
if test ${#media_default[*]} -lt 1; then
	urpm-repo --url=$stupid_urpm_url list >$tmpdir/medias.lst ||
	exit

	while read media; do
		media_default+=("$media")
	done <$tmpdir/medias.lst
fi

for included in "${media_included[@]}"; do
	for media in "${media_default[@]}"; do
		test "$included" = "$media" && continue 2
	done
	media_default+=("$included")
done

for excluded in "${media_excluded[@]}"; do
	for i in ${!media_default[*]}; do
		test "$excluded" = "${media_default[i]}" && unset media_default[$i]
	done
done

media_opt="--media="
for media in "${media_default[@]}"; do
	media_opt+="$media,"
done

#
# This gets the list of all dependencies of the specified
# packages. 'root' packages are also included in the returned list.
#
# urpmq(1) can report several possibilites/candidates for one specific
# dep. The items of the list are separeted by '|' char in that
# case. Unfortunately the list doesn't seem to be ordered, so the
# first item is not the one urpmi would select when --auto is passed.
#
# Note also for those candidates, their deps are not shown, so we have
# to restart a deps discovery for them.
#
# urpmq(1) has also the --prefer option but it has absolutely no
# effects when tested... oh well...
#
select_candidate () {
	for c; do
		if test ${preferred_packages[$c]}; then
			echo $c
			return
		fi
	done
	for c; do
		for re in "${preferred_regexp_package[@]}"; do
			if [[ $c =~ $re ]]; then
				echo $c
				return
			fi
		done
	done
	echo $1
}

_get_all_dependencies () {
	# urpmq(1) prints some debug outputs on stderr if ssh protocol
	# is used...
	urpmq --use-distrib $stupid_urpm_url \
	      "$media_opt" \
	      --requires-recursive "$@" \
	      >$tmpdir/deps.lst 2>$tmpdir/urpmq-stderr.log

	# urpmq is boggus: it can return 0 even when failing so try
	# to handle the case gracefully.
	if test $? -ne 0 || ! test -s $tmpdir/deps.lst; then
		warn "Failed to retrieve dependencies for given packages."
		warn "Here's the log of urpmq that might help you to resolve the issue:"
		warn
		cat >&2 $tmpdir/urpmq-stderr.log
		return 1
	fi

	cat $tmpdir/deps.lst | sort | uniq >$tmpdir/deps-sorted.lst
	# Return the deps with no ambiguity.
	sed -e '/.*|.*/d' $tmpdir/deps-sorted.lst

	# Handle multiple candidates fulfilling one dep.
	grep -q -F '|' $tmpdir/deps-sorted.lst || return 0

	sed -n '/.*|.*/p' $tmpdir/deps-sorted.lst | \
		while IFS='|' read -a candidates
		do
			for c in $(select_candidate "${candidates[@]}"); do
				# Avoid cyclic deps.
				grep -q "$c\$" $tmpdir/deps-visited.lst &&
					continue
				echo "$c" >>$tmpdir/deps-visited.lst
				_get_all_dependencies $c
			done
		done
}

get_all_dependencies () {
	> $tmpdir/deps-visited.lst
	_get_all_dependencies "$@" | sort | uniq
}

echo "Processing dependencies..."
get_all_dependencies "${packages[@]}" >$tmpdir/dependencies-sorted.lst ||
exit

#
# Generate rsync filter rules and use them to sync the repo.
#
for p in $(< $tmpdir/dependencies-sorted.lst); do
	echo "+ $p-[[:digit:]]*.rpm"
done >$tmpdir/rsync-filter-rpm

cat >$tmpdir/rsync-filter-packages<<EOF
${filter_from:+. $filter_from}
. $tmpdir/rsync-filter-rpm
- *.rpm
- media_info/*
EOF

transfer_root=/${distrib##*/}

cat >$tmpdir/rsync-filter-configs<<EOF
+ /*/
+ /*/media/
+ /*/media/media_info/
+ /*/media/media_info/*
- *
EOF

echo "Importing repository..."
rsync -a $verbose $dry_run				\
	"${exclude_patterns[@]}"			\
	--filter=". $tmpdir/rsync-filter-packages"	\
	${distrib#ssh://} $destination &&

# don't overwrite config files that could have been updated on the
# receiving side.
rsync -a $verbose $dry_run --update			\
	"${exclude_patterns[@]}"			\
	--filter=". $tmpdir/rsync-filter-configs"	\
	${distrib#ssh://} $destination ||
exit

test -n "$dry_run" &&
exit

#
# Finally update the hdlists.
#
echo "Updating hdlists..."
cd $destination/${distrib##*/}

# Skip the global media_info directory.
find -path './media/?*/media_info' -type d -prune | while read d
do
	#
	# Not sure what 'file-deps' is exactly used for but it's how
	# the BS calls it, see:
	#
	# /usr/share/mga-youri-submit/lib/Youri/Submit/Post/Genhdlist2.pm
	#
	genhdlist2 --quiet $verbose \
	    --file-deps=media/media_info/file-deps \
	    --allow-empty-media \
	    $(dirname $d) || exit
done

#
# Regenerate the global MD5SUM, since the previous command made it
# incomplete. Again this recipe is coming from:
#
# /usr/share/mga-youri-submit/lib/Youri/Submit/Post/Genhdlist2.pm
#
# Some symlinks may be dangling so ignore any errors.
#
(cd media/media_info; md5sum hdlist_* synthesis.* >MD5SUM 2>/dev/null) || :

#
# Finally configure repository to enable medias that were previously
# used.
#
for media in "${media_default[@]}"; do
	noauto=$(urpm-repo --url=$(pwd) get "$media" noauto) || exit
	case $noauto in
	1)
		echo "Enabling media '$media'"
		urpm-repo --url=$(pwd) set "$media" noauto 0 || exit ;;
	esac
done
